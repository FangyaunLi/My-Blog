{
  "hash": "afff9ebfbda5d7ea5ca71786e714111d",
  "result": {
    "markdown": "---\ntitle: 分面图的因子变量排序\ndate: \"2024-04-15\"\ncategories: [R, text data]\n---\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidytext)\ntheme_set(hrbrthemes::theme_ipsum_rc())\nupdate_geom_defaults(\"pointrange\", new = list(size = 1.2, linewidth = 1.5))\n```\n:::\n\n\n一般在绘制条形图或克里夫兰点图时，会按照柱子或点的高低对变量进行排序，以使图形更加整洁美观。\n\n例如：\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\npop_data <- population %>% \n  filter(year == 1995) %>% \n  slice_head(n = 10)\n\n\npop_data %>% \n  ggplot(aes(country, population)) +\n  geom_pointrange(aes(ymin = 0, ymax = population)) +\n  scale_y_continuous(labels = scales::label_comma()) +\n  coord_flip() \n```\n\n::: {.cell-output-display}\n![排序前](分面图的因子变量排序_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\npop_data %>% \n  mutate(country = fct_reorder(country, population)) %>% \n  ggplot(aes(country, population)) +\n  geom_pointrange(aes(ymin = 0, ymax = population)) +\n  scale_y_continuous(labels = scales::label_comma()) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![排序后](分面图的因子变量排序_files/figure-html/unnamed-chunk-2-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n上面的排序是借助`fct_reorder()`函数实现的。然而,在处理文本数据并绘制分面图时,我发现这种方法会出现问题。\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexm_data <- tibble(\n  x = rep(LETTERS[1:5], 2),\n  y = sample(1:10),\n  z = c(rep(\"group1\", 5), rep(\"group2\", 5))\n)\n\nexm_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n   x         y z     \n   <chr> <int> <chr> \n 1 A         8 group1\n 2 B         6 group1\n 3 C        10 group1\n 4 D         1 group1\n 5 E         3 group1\n 6 A         2 group2\n 7 B         5 group2\n 8 C         7 group2\n 9 D         9 group2\n10 E         4 group2\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexm_data %>% \n  group_by(z) %>% \n  mutate(x = fct_reorder(x, y)) %>% \n  ggplot(aes(x, y, color = z)) +\n  geom_pointrange(aes(ymin = 0, ymax = y), show.legend = FALSE) +\n  facet_wrap(~ z, nrow = 1, scales = \"free\") +\n  coord_flip() +\n  scale_color_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](分面图的因子变量排序_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n可以看出，group1组别中的排序是正确的，group2组中的排序却是混乱的。虽然在`fct_reorder()`前使用了`group_by()`，但是变量`x`并没有真正在两个组内分别排序。这是因为group1和group2的数据同处于同一个数据框内，作为因子变量的`x`不能同时有两种排序方式。\n\n举个例子，我们按照不同的排序生成两组因子变量，然后将它们合并为一列\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\ndt_a <- tibble(fct_var = factor(c(\"A\", \"B\", \"C\", \"D\"), levels = c(\"A\", \"B\", \"C\", \"D\")),\n               id = \"a\")\ndt_b <- tibble(fct_var = factor(c(\"A\", \"B\", \"C\", \"D\"), levels = c(\"D\", \"C\", \"B\", \"A\")),\n               id = \"b\")\n\ndt_bind <- bind_rows(dt_a, dt_b)\ndt_bind\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  fct_var id   \n  <fct>   <chr>\n1 A       a    \n2 B       a    \n3 C       a    \n4 D       a    \n5 A       b    \n6 B       b    \n7 C       b    \n8 D       b    \n```\n:::\n:::\n\n\n但此时因子变量`fct_var`只有一种排序方式。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlevels(dt_bind$fct_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"B\" \"C\" \"D\"\n```\n:::\n:::\n\n\n因此，在绘制分面图形时，不能用`fct_reorder()`来调整因子变量的排序。\n\n幸运的是，`tidytext`包的`reorder_within()`和`scale_*_reordered()`可以解决这个问题。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexm_data %>% \n  mutate(x = reorder_within(x, by = y, within = z)) %>% \n  ggplot(aes(x, y, color = z)) +\n  geom_pointrange(aes(ymin = 0, ymax = y), show.legend = FALSE) +\n  facet_wrap(~ z, scales = \"free_y\") +\n  scale_x_reordered() +\n  coord_flip() +\n  scale_color_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](分面图的因子变量排序_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n这个方法的本质是先将因子变量和用于分面的变量合并成一个新的因子变量，再对这个新的因子变量进行排序。\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexm_data %>% \n  mutate(x = reorder_within(x, by = y, within = z))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n   x              y z     \n   <fct>      <int> <chr> \n 1 A___group1     8 group1\n 2 B___group1     6 group1\n 3 C___group1    10 group1\n 4 D___group1     1 group1\n 5 E___group1     3 group1\n 6 A___group2     2 group2\n 7 B___group2     5 group2\n 8 C___group2     7 group2\n 9 D___group2     9 group2\n10 E___group2     4 group2\n```\n:::\n:::\n\n\n相当于\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexm_data %>% \n  mutate(x = str_c(x, z, sep = \"__\"),\n         x = fct_reorder(x, y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n   x             y z     \n   <fct>     <int> <chr> \n 1 A__group1     8 group1\n 2 B__group1     6 group1\n 3 C__group1    10 group1\n 4 D__group1     1 group1\n 5 E__group1     3 group1\n 6 A__group2     2 group2\n 7 B__group2     5 group2\n 8 C__group2     7 group2\n 9 D__group2     9 group2\n10 E__group2     4 group2\n```\n:::\n:::\n\n\n\n总之,在绘制包含分面的图形时,如果需要对不同分面内的因子变量进行排序,可以使用`tidytext`包提供的`reorder_within()`和`scale_*_reordered()`函数,它们可以帮助我们轻松实现分组内的因子变量排序。",
    "supporting": [
      "分面图的因子变量排序_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}